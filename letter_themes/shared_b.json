[
    {
        "id": "B1",
        "content": "I want to build a highly interactive chart using D3.js. The rendering is straightforward, but what's the best way to structure data updates for smooth animations?"
    },
    {
        "id": "B2",
        "content": "I have this async function in JavaScript that sometimes hangs indefinitely. The logic seems fine, but I think I'm mishandling some unresolved promises somewhere."
    },
    {
        "id": "B3",
        "content": "I'm curious about how dependency injection really works in Angular. How does the injector track services and share them across different components and modules?"
    },
    {
        "id": "B4",
        "content": "I'm dealing with a memory leak in a Java application. The heap grows slowly over time and doesn't shrink back, even after cleanup logic should've run."
    },
    {
        "id": "B5",
        "content": "I'm trying to merge two sorted arrays in Python without allocating extra space. It works fine on small inputs, but it completely breaks down with larger data. Not sure if it's algorithmic or memory-related."
    },
    {
        "id": "B6",
        "content": "How does Python's asyncio event loop differ from JavaScript's? They both use non-blocking calls, but the mental model still feels different."
    },
    {
        "id": "B7",
        "content": "I built a machine learning model with scikit-learn that scores well during validation, but it performs terribly on new data. I wonder if I've overfit or missed something in preprocessing."
    },
    {
        "id": "B8",
        "content": "I've been thinking about how React's rendering actually works. What triggers a rerender beyond just state or props? Are there deeper mechanics under the hood?"
    },
    {
        "id": "B9",
        "content": "I'm working on a C++ binary search tree. Insertions and traversals behave correctly, but deletion corrupts the tree, especially when removing nodes with two children."
    },
    {
        "id": "B10",
        "content": "How does memory management work in modern browsers? I'm curious how garbage collection interacts with closures and retained DOM nodes."
    },
    {
        "id": "B11",
        "content": "I've got this JavaScript problem again. When I pass a method as a callback, it loses context. I've tried binding and arrow functions, but something still isn't right."
    },
    {
        "id": "B12",
        "content": "I want to explore how payment gateways like Stripe handle tokenization and PCI compliance. What's the secure flow from form input to transaction?"
    },
    {
        "id": "B13",
        "content": "I'm debugging a REST API built with Node.js. Basic routes are fine, but authentication middleware occasionally fails silently, and I can't pinpoint why."
    },
    {
        "id": "B14",
        "content": "How does async/await really behave under the hood in JavaScript? Is it just syntactic sugar over promises, or is there more going on in the event loop?"
    },
    {
        "id": "B15",
        "content": "My SQL query runs correctly but painfully slow. It's a multi-join with subqueries, and everything works on dev data, but in production, it takes forever to execute."
    },
    {
        "id": "B16",
        "content": "I'm building a social feed using PostgreSQL. How should I structure the queries to support real-time filtering and sorting without killing performance?"
    },
    {
        "id": "B17",
        "content": "In React, I keep running into race conditions when using async state updates. My cleanup functions don't always trigger before unmounting, which is causing memory leaks."
    },
    {
        "id": "B18",
        "content": "I'm designing a RESTful API and want to handle validation cleanly. What's the best pattern for chaining middleware in Node.js while keeping error messages consistent?"
    },
    {
        "id": "B19",
        "content": "I'm building a component library in React. How do big design systems manage global theming and prop forwarding across deeply nested components?"
    },
    {
        "id": "B20",
        "content": "My responsive layout using flexbox collapses unpredictably on mobile devices. It behaves perfectly in dev tools but fails when tested on actual phones."
    }
]